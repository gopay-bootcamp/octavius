// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OctaviusServicesClient is the client API for OctaviusServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctaviusServicesClient interface {
	GetStreamLogs(ctx context.Context, in *RequestForStreamLog, opts ...grpc.CallOption) (OctaviusServices_GetStreamLogsClient, error)
	ExecuteJob(ctx context.Context, in *RequestForExecute, opts ...grpc.CallOption) (*Response, error)
	PostMetadata(ctx context.Context, in *RequestToPostMetadata, opts ...grpc.CallOption) (*MetadataName, error)
	GetAllMetadata(ctx context.Context, in *RequestToGetAllMetadata, opts ...grpc.CallOption) (*MetadataArray, error)
}

type octaviusServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewOctaviusServicesClient(cc grpc.ClientConnInterface) OctaviusServicesClient {
	return &octaviusServicesClient{cc}
}

func (c *octaviusServicesClient) GetStreamLogs(ctx context.Context, in *RequestForStreamLog, opts ...grpc.CallOption) (OctaviusServices_GetStreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OctaviusServices_serviceDesc.Streams[0], "/OctaviusServices/GetStreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &octaviusServicesGetStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OctaviusServices_GetStreamLogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type octaviusServicesGetStreamLogsClient struct {
	grpc.ClientStream
}

func (x *octaviusServicesGetStreamLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *octaviusServicesClient) ExecuteJob(ctx context.Context, in *RequestForExecute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OctaviusServices/ExecuteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octaviusServicesClient) PostMetadata(ctx context.Context, in *RequestToPostMetadata, opts ...grpc.CallOption) (*MetadataName, error) {
	out := new(MetadataName)
	err := c.cc.Invoke(ctx, "/OctaviusServices/PostMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octaviusServicesClient) GetAllMetadata(ctx context.Context, in *RequestToGetAllMetadata, opts ...grpc.CallOption) (*MetadataArray, error) {
	out := new(MetadataArray)
	err := c.cc.Invoke(ctx, "/OctaviusServices/GetAllMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OctaviusServicesServer is the server API for OctaviusServices service.
// All implementations should embed UnimplementedOctaviusServicesServer
// for forward compatibility
type OctaviusServicesServer interface {
	GetStreamLogs(*RequestForStreamLog, OctaviusServices_GetStreamLogsServer) error
	ExecuteJob(context.Context, *RequestForExecute) (*Response, error)
	PostMetadata(context.Context, *RequestToPostMetadata) (*MetadataName, error)
	GetAllMetadata(context.Context, *RequestToGetAllMetadata) (*MetadataArray, error)
}

// UnimplementedOctaviusServicesServer should be embedded to have forward compatible implementations.
type UnimplementedOctaviusServicesServer struct {
}

func (*UnimplementedOctaviusServicesServer) GetStreamLogs(*RequestForStreamLog, OctaviusServices_GetStreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamLogs not implemented")
}
func (*UnimplementedOctaviusServicesServer) ExecuteJob(context.Context, *RequestForExecute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteJob not implemented")
}
func (*UnimplementedOctaviusServicesServer) PostMetadata(context.Context, *RequestToPostMetadata) (*MetadataName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMetadata not implemented")
}
func (*UnimplementedOctaviusServicesServer) GetAllMetadata(context.Context, *RequestToGetAllMetadata) (*MetadataArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetadata not implemented")
}

func RegisterOctaviusServicesServer(s *grpc.Server, srv OctaviusServicesServer) {
	s.RegisterService(&_OctaviusServices_serviceDesc, srv)
}

func _OctaviusServices_GetStreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestForStreamLog)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OctaviusServicesServer).GetStreamLogs(m, &octaviusServicesGetStreamLogsServer{stream})
}

type OctaviusServices_GetStreamLogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type octaviusServicesGetStreamLogsServer struct {
	grpc.ServerStream
}

func (x *octaviusServicesGetStreamLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _OctaviusServices_ExecuteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestForExecute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctaviusServicesServer).ExecuteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OctaviusServices/ExecuteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctaviusServicesServer).ExecuteJob(ctx, req.(*RequestForExecute))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctaviusServices_PostMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToPostMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctaviusServicesServer).PostMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OctaviusServices/PostMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctaviusServicesServer).PostMetadata(ctx, req.(*RequestToPostMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctaviusServices_GetAllMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToGetAllMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctaviusServicesServer).GetAllMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OctaviusServices/GetAllMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctaviusServicesServer).GetAllMetadata(ctx, req.(*RequestToGetAllMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _OctaviusServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OctaviusServices",
	HandlerType: (*OctaviusServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteJob",
			Handler:    _OctaviusServices_ExecuteJob_Handler,
		},
		{
			MethodName: "PostMetadata",
			Handler:    _OctaviusServices_PostMetadata_Handler,
		},
		{
			MethodName: "GetAllMetadata",
			Handler:    _OctaviusServices_GetAllMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamLogs",
			Handler:       _OctaviusServices_GetStreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/protobuf/process.proto",
}
